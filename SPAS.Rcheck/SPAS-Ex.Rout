
R version 3.5.2 (2018-12-20) -- "Eggshell Igloo"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "SPAS"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> base::assign(".ExTimings", "SPAS-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('SPAS')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("SPAS.fit.model")
> ### * SPAS.fit.model
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: SPAS.fit.model
> ### Title: Fit a Stratifed-Petersen (SP) model
> ### Aliases: SPAS.fit.model
> 
> ### ** Examples
> 
> conne.data.csv <- textConnection("
+ 9  ,    21  ,     0  ,    0  ,    0  ,    0  ,   171
+ 0  ,   101  ,    22  ,    1  ,    0  ,    0  ,   763
+ 0  ,     0  ,   128  ,   49  ,    0  ,    0  ,   934
+ 0  ,     0  ,     0  ,   48  ,   12  ,    0  ,   434
+ 0  ,     0  ,     0  ,    0  ,    7  ,    0  ,    49
+ 0  ,     0  ,     0  ,    0  ,    0  ,    0  ,     4
+ 351,  2736  ,  3847  , 1818  ,  543  ,   191 ,     0")
> conne.data <- as.matrix(read.csv(conne.data.csv, header=FALSE))
> close(conne.data.csv)
>  
> mod1 <- SPAS.fit.model(conne.data, model.id="Pooling rows 1/2, 5/6; pooling columns 5/6",
+                       row.pool.in=c("12","12","3","4","56","56"),
+                       col.pool.in=c(1,2,3,4,56,56),
+                       optMethod.control=list(ftol=.0001))
Using BBoptim() to find conditional MLE
iter:  0  f-value:  -78783.79  pgrad:  16.85281 
iter:  10  f-value:  -79045.04  pgrad:  9.527663 
iter:  20  f-value:  -79046.58  pgrad:  16.93404 
iter:  30  f-value:  -79048.63  pgrad:  5.823152 
iter:  40  f-value:  -79048.46  pgrad:  16.76275 
iter:  50  f-value:  -78863.35  pgrad:  17.03592 
iter:  60  f-value:  -79050.75  pgrad:  2.540809 
iter:  70  f-value:  -79050.95  pgrad:  8.783722 
iter:  80  f-value:  -79051.05  pgrad:  1.652872 
iter:  90  f-value:  -79051.18  pgrad:  3.105881 
iter:  100  f-value:  -79023.49  pgrad:  16.82149 
iter:  110  f-value:  -79051.31  pgrad:  1.289599 
iter:  120  f-value:  -79051.74  pgrad:  3.299458 
iter:  130  f-value:  -79051.77  pgrad:  0.5800224 
  Successful convergence.
Finding conditional estimate of N
Warning in sqrt(diag(hess$vcv)) : NaNs produced
Warning in sqrt(diag(RESULT$est.star$vcv)) : NaNs produced
Warning in sqrt(diag(RESULT$real$vcv)) : NaNs produced
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("SPAS.fit.model", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("SPAS.print.model")
> ### * SPAS.print.model
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: SPAS.print.model
> ### Title: Print the results from a fit of a Stratifed-Petersen (SP) model
> ### Aliases: SPAS.print.model
> 
> ### ** Examples
> 
> conne.data.csv <- textConnection("
+ 9  ,    21  ,     0  ,    0  ,    0  ,    0  ,   171
+ 0  ,   101  ,    22  ,    1  ,    0  ,    0  ,   763
+ 0  ,     0  ,   128  ,   49  ,    0  ,    0  ,   934
+ 0  ,     0  ,     0  ,   48  ,   12  ,    0  ,   434
+ 0  ,     0  ,     0  ,    0  ,    7  ,    0  ,    49
+ 0  ,     0  ,     0  ,    0  ,    0  ,    0  ,     4
+ 351,  2736  ,  3847  , 1818  ,  543  ,   191 ,     0")
> conne.data <- as.matrix(read.csv(conne.data.csv, header=FALSE))
> close(conne.data.csv)
>  
> mod1 <- SPAS.fit.model(conne.data, model.id="Pooling rows 1/2, 5/6; pooling columns 5/6",
+                       row.pool.in=c("12","12","3","4","56","56"),
+                       col.pool.in=c(1,2,3,4,56,56),
+                       optMethod.control=list(ftol=.0001))
Using BBoptim() to find conditional MLE
iter:  0  f-value:  -78783.79  pgrad:  16.85281 
iter:  10  f-value:  -79045.04  pgrad:  9.527663 
iter:  20  f-value:  -79046.58  pgrad:  16.93404 
iter:  30  f-value:  -79048.63  pgrad:  5.823152 
iter:  40  f-value:  -79048.46  pgrad:  16.76275 
iter:  50  f-value:  -78863.35  pgrad:  17.03592 
iter:  60  f-value:  -79050.75  pgrad:  2.540809 
iter:  70  f-value:  -79050.95  pgrad:  8.783722 
iter:  80  f-value:  -79051.05  pgrad:  1.652872 
iter:  90  f-value:  -79051.18  pgrad:  3.105881 
iter:  100  f-value:  -79023.49  pgrad:  16.82149 
iter:  110  f-value:  -79051.31  pgrad:  1.289599 
iter:  120  f-value:  -79051.74  pgrad:  3.299458 
iter:  130  f-value:  -79051.77  pgrad:  0.5800224 
  Successful convergence.
Finding conditional estimate of N
Warning in sqrt(diag(hess$vcv)) : NaNs produced
Warning in sqrt(diag(RESULT$est.star$vcv)) : NaNs produced
Warning in sqrt(diag(RESULT$real$vcv)) : NaNs produced
> 
> SPAS.print.model(mod1)
Model Name: Pooling rows 1/2, 5/6; pooling columns 5/6 
   Date of Fit: 2019-02-06 22:09 
   Version of OPEN SPAS used : SPAS-R 2019-01-01 
 
Raw data 
      V1   V2   V3   V4  V5  V6  V7
[1,]   9   21    0    0   0   0 171
[2,]   0  101   22    1   0   0 763
[3,]   0    0  128   49   0   0 934
[4,]   0    0    0   48  12   0 434
[5,]   0    0    0    0   7   0  49
[6,]   0    0    0    0   0   0   4
[7,] 351 2736 3847 1818 543 191   0

Row pooling setup : 12 12 3 4 56 56 
Col pooling setup : 1 2 3 4 56 56 
Theta pooling     : FALSE 
CJS pooling       : FALSE 

 
Raw data AFTER POOLING 
       pool1 pool2 pool3 pool4 pool56  V7
pool12     9   122    22     1      0 934
pool3      0     0   128    49      0 934
pool4      0     0     0    48     12 434
pool56     0     0     0     0      7  53
         351  2736  3847  1818    734   0

  Conditional   Log-Likelihood: 79051.77    ;  np: 28 ;  AICc: 158159.7 

  Code/Message from optimization is:  0 Successful convergence 

Estimates
             pool1  pool2  pool3  pool4 pool56 psi cap.prob exp factor Pop Est
pool12        14.3  116.6   22.1    1.0    0.1 934    0.041       23.4   26572
pool3          0.1    0.1  128.3   48.5    0.1 934    0.037       25.9   29873
pool4          0.1    0.1    0.1   47.6   11.9 434    0.082       11.2    6020
pool56         0.1    0.1    0.1    0.1    7.6  53    0.013       78.1    4746
est unmarked 345.5 2741.4 3846.6 1818.7  733.7   0       NA         NA   67290

SE of above estimates
             pool1 pool2 pool3 pool4 pool56  psi cap.prob exp factor Pop Est
pool12         NaN  10.0   4.7   1.0    0.3 30.6    0.003        2.1    2239
pool3          0.4   0.3  11.3   6.9    0.3 30.6    0.003        2.5    2785
pool4          0.3   0.3   0.3   6.9    3.5 20.8    0.033        4.9    2430
pool56         NaN   0.3   0.3   0.3    2.7  7.3    0.005       28.7    1725
est unmarked    NA    NA    NA    NA     NA  0.0       NA         NA    3330
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("SPAS.print.model", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  1.331 0.06 1.396 0.001 0.001 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
